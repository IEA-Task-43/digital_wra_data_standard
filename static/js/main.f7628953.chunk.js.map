{"version":3,"sources":["Rating.tsx","RatingControl.tsx","ratingControlTester.js","App.tsx","registerServiceWorker.js","index.tsx"],"names":["Rating","props","state","rating","value","hoverAt","idx","this","setState","onClick","id","map","i","onMouseOver","handleMouseOver","onMouseOut","handleMouseOut","handleClick","key","React","getDerivedStateFromProps","nextProps","prevState","withJsonFormsControlProps","data","handleChange","path","ev","Number","rankWith","scopeEndsWith","styles","createStyles","container","padding","title","textAlign","dataContent","display","justifyContent","borderRadius","backgroundColor","demoform","margin","withStyles","store","classes","useState","tabIdx","displayDataAsString","setDisplayDataAsString","standaloneData","setStandaloneData","useEffect","updateStringData","stringData","JSON","stringify","get","getState","getDataAsStringFromStore","subscribe","className","Grid","justify","spacing","item","sm","schema","uischema","renderers","materialRenderers","tester","ratingControlTester","renderer","RatingControl","cells","materialCells","onChange","errors","Typography","variant","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initState","jsonforms","rootReducer","combineReducers","jsonformsReducer","createStore","devToolsEnhancer","dispatch","Actions","init","name","description","done","recurrence","registerRenderer","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f7628953.chunk.js","sourcesContent":["import * as React from 'react';\n\n// TODO: typings\nexport class Rating extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      rating: props.value,\n      hoverAt: null\n    };\n  }\n\n  static getDerivedStateFromProps = (nextProps: any, prevState: any) => {\n    if (prevState.rating !== nextProps.value) {\n      return {\n        rating: nextProps.value,\n        hoverAt: prevState.hoverAt\n      };\n    }\n    return null;\n  };\n\n  handleMouseOver(idx: number) {\n    this.setState({\n      hoverAt: idx + 1\n    });\n  }\n\n  handleMouseOut() {\n    this.setState({\n      hoverAt: null\n    });\n  }\n\n  handleClick(idx: number) {\n    this.setState({\n      rating: idx + 1\n    });\n  }\n\n  render() {\n    const { onClick } = this.props;\n\n    return (\n      <div id='#/properties/rating'>\n        <p>Rating:</p>\n        {[0, 1, 2, 3, 4].map(i => {\n          const rating =\n            this.state.hoverAt != null ? this.state.hoverAt : this.state.rating;\n\n          return (\n            <span\n              onMouseOver={() => this.handleMouseOver(i)}\n              onMouseOut={() => this.handleMouseOut()}\n              onClick={() => {\n                this.handleClick(i);\n                onClick({ value: i + 1 });\n              }}\n              key={`${this.props.id}_${i}`}\n            >\n              {i < rating ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    onClick={(ev: any) => handleChange(path, Number(ev.value))}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  JsonForms,\n  JsonFormsDispatch,\n  JsonFormsReduxContext\n} from '@jsonforms/react';\nimport { Provider } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\nimport createStyles from '@material-ui/core/styles/createStyles';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport {\n  materialCells,\n  materialRenderers\n} from '@jsonforms/material-renderers';\nimport { Store } from 'redux';\nimport { get } from 'lodash';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\n\nconst styles = createStyles({\n  container: {\n    padding: '1em'\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em'\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    borderRadius: '0.25em',\n    backgroundColor: '#eeeeee'\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem'\n  }\n});\n\nexport interface AppProps extends WithStyles<typeof styles> {\n  store: Store;\n}\n\nconst data = {\n};\n\nconst getDataAsStringFromStore = (store: Store) =>\n  store\n    ? JSON.stringify(\n        get(store.getState(), ['jsonforms', 'core', 'data']),\n        null,\n        2\n      )\n    : '';\n\nconst App = ({ store, classes }: AppProps) => {\n  const [tabIdx] = useState(0);\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [standaloneData, setStandaloneData] = useState(data);\n\n  useEffect(() => {\n    const updateStringData = () => {\n      const stringData = getDataAsStringFromStore(store);\n      setDisplayDataAsString(stringData);\n    };\n    store.subscribe(updateStringData);\n    updateStringData();\n  }, [store]);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(standaloneData, null, 2));\n  }, [standaloneData]);\n\n  return (\n    <Fragment>\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>Form Prototype</h1>\n        </header>\n      </div>\n\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={12}>\n          {tabIdx === 0 && (\n            <div className={classes.demoform}>\n              <JsonForms\n                schema={schema}\n                uischema={uischema}\n                data={standaloneData}\n                renderers={[\n                  ...materialRenderers,\n                  //register custom renderer\n                  { tester: ratingControlTester, renderer: RatingControl }\n                ]}\n                cells={materialCells}\n                onChange={({ errors, data }) => setStandaloneData(data)}\n              />\n            </div>\n          )}\n          {tabIdx === 1 && (\n            <div className={classes.demoform} id='form'>\n              {store ? (\n                <Provider store={store}>\n                  <JsonFormsReduxContext>\n                    <JsonFormsDispatch />\n                  </JsonFormsReduxContext>\n                </Provider>\n              ) : null}\n            </div>\n          )}\n        </Grid>\n        <Grid item sm={12}>\n          <Typography variant={'h3'} className={classes.title}>\n            Rendered JSON\n          </Typography>\n          <div className={classes.dataContent}>\n            <pre id='boundData'>{displayDataAsString}</pre>\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { combineReducers, createStore, Reducer, AnyAction } from 'redux';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport { Actions, jsonformsReducer, JsonFormsState } from '@jsonforms/core';\nimport {\n  materialCells,\n  materialRenderers\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\n\n// Setup Redux store\nconst data = {\n  name: 'Send email to Adrian',\n  description: 'Confirm if you have passed the subject\\nHereby ...',\n  done: true,\n  recurrence: 'Daily',\n  rating: 3\n};\n\nconst initState: JsonFormsState = {\n  jsonforms: {\n    cells: materialCells,\n    renderers: materialRenderers\n  }\n};\n\nconst rootReducer: Reducer<JsonFormsState, AnyAction> = combineReducers({\n  jsonforms: jsonformsReducer()\n});\nconst store = createStore(rootReducer, initState, devToolsEnhancer({}));\nstore.dispatch(Actions.init(data, schema, uischema));\n\n// Register custom renderer for the Redux tab\nstore.dispatch(Actions.registerRenderer(ratingControlTester, RatingControl));\n\nReactDOM.render(<App store={store} />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}